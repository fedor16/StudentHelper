from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from database import Session, User, Task, Subject, func
from datetime import datetime
import re

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
REGISTER_STATE, CREATE_TASK_TITLE, CREATE_TASK_DESC, CREATE_TASK_SUBJECT, CREATE_TASK_TEACHER, CREATE_TASK_PHOTO = range(6)
SEND_SOLUTION, = range(1, 2)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
MENU_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("–ú–µ–Ω—é")]], 
    resize_keyboard=True,
    is_persistent=True
)

async def start(update: Update, context: CallbackContext) -> int:
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        
        if user:
            if user.user_type == 'student':
                await student_menu(update, context)
            elif user.user_type == 'helper':
                await helper_menu(update, context)
            elif user.user_type == 'teacher':
                await teacher_menu(update, context)
            return ConversationHandler.END
        else:
            keyboard = [
                [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data='student')],
                [InlineKeyboardButton("–ü–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç", callback_data='helper')],
                [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data='teacher')]
            ]
            await update.message.reply_text(  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            return REGISTER_STATE  # –û—Ç—Å—Ç—É–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω

async def register_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    user_type = query.data
    context.user_data['user_type'] = user_type
    
    if user_type == 'student':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –≥—Ä. –ò–¢-1")
    elif user_type == 'helper':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –≥—Ä. –ò–¢-2")
    elif user_type == 'teacher':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –°–∏–¥–æ—Ä–æ–≤ –°.–ê.")
    
    return REGISTER_STATE

async def complete_registration(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    chat_id = update.effective_chat.id
    user_type = context.user_data['user_type']
    
    if user_type in ['student', 'helper']:
        if not re.search(r'–≥—Ä\.\s*\w+', text, re.IGNORECASE):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –≥—Ä. –ò–¢-1")
            return REGISTER_STATE
    
    with Session() as session:
        new_user = User(
            chat_id=chat_id,
            user_type=user_type,
            full_name=text
        )
        
        if user_type in ['student', 'helper']:
            match = re.search(r'–≥—Ä\.\s*(\w+)', text, re.IGNORECASE)
            if match:
                new_user.group_name = match.group(1).strip()
        
        session.add(new_user)
        session.commit()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_type == 'student':
        await student_menu(update, context)
    elif user_type == 'helper':
        await helper_menu(update, context)
    elif user_type == 'teacher':
        await teacher_menu(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=MENU_KEYBOARD
    )
    
    return ConversationHandler.END

async def menu_handler(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        if user.user_type == 'student':
            await student_menu(update, context)
        elif user.user_type == 'helper':
            await helper_menu(update, context)
        elif user.user_type == 'teacher':
            await teacher_menu(update, context)

async def student_menu(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if not user or user.user_type != 'student':
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            else:
                query = update.callback_query
                await query.answer()
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='create_task')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data='my_tasks')],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤", callback_data='helper_rating')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_student_menu')]
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüéì –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "üë®‚Äçüéì –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=MENU_KEYBOARD
    )

async def show_student_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if not user or user.user_type != 'student':
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        tasks = session.query(Task).filter_by(student_id=user.id).order_by(Task.status, Task.created_at).all()
        
        if not tasks:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return
        
        message = ["üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:"]
        keyboard = []
        
        for task in tasks:
            status_icon = "üÜï" if task.status == 'new' else "üîÑ" if task.status == 'in_progress' else "‚úÖ"
            task_info = [
                f"{status_icon} <b>{task.title}</b>",
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description[:50]}...",
                f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}",
                f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {task.teacher_name}",
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%d.%m.%Y %H:%M')}",
                f"üîÑ –°—Ç–∞—Ç—É—Å: {task.status}"
            ]
            
            if task.helper:
                task_info.append(f"üë®‚Äçüéì –ü–æ–º–æ—â–Ω–∏–∫: {task.helper.full_name}")
            
            message.append("\n".join(task_info))
            
            if task.status == 'new':
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å '{task.title[:15]}...'", 
                        callback_data=f"delete_task_{task.id}")
                ])
            elif task.status == 'completed' and not task.rating:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚≠ê –û—Ü–µ–Ω–∏—Ç—å '{task.title[:15]}...'", 
                        callback_data=f"rate_task_{task.id}")
                ])
        
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_student_menu')])
        
        await query.edit_message_text(
            text="\n\n".join(message),
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    
    with Session() as session:
        task = session.query(Task).get(task_id)
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if task.status != 'new':
            await query.edit_message_text("‚ùå –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            return
            
        session.delete(task)
        session.commit()
    
    await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    await show_student_tasks(update, context)

async def rate_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    context.user_data['rating_task_id'] = task_id
    
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f'set_rating_{i}') for i in range(1, 6)]
    ]
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (1-5):",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def set_rating(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[2])
    task_id = context.user_data.get('rating_task_id')
    
    if not task_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    with Session() as session:
        task = session.query(Task).get(task_id)
        if not task or task.status != 'completed':
            await query.edit_message_text("‚ùå –ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            return
            
        task.rating = rating
        session.commit()
        
        if task.helper:
            helper = session.query(User).get(task.helper.id)
            completed_tasks = session.query(Task)\
                .filter_by(helper_id=helper.id, status='completed')\
                .filter(Task.rating.isnot(None))\
                .count()
                
            if completed_tasks > 0:
                total_rating = session.query(func.sum(Task.rating))\
                    .filter_by(helper_id=helper.id)\
                    .scalar()
                helper.rating = total_rating / completed_tasks
                session.commit()
    
    await query.edit_message_text(f"‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} –∑–∞ –∑–∞–¥–∞–Ω–∏–µ")
    await show_student_tasks(update, context)

async def show_helper_rating(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    with Session() as session:
        helpers = session.query(User)\
            .filter_by(user_type='helper')\
            .order_by(User.rating.desc())\
            .all()
        
        if not helpers:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
            return
        
        message = ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:\n"]
        for i, helper in enumerate(helpers, 1):
            message.append(
                f"{i}. {helper.full_name} - ‚≠ê {helper.rating:.1f} "
                f"(–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {helper.completed_tasks})"
            )
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_student_menu')]]
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def helper_menu(update: Update, context: CallbackContext):
    if isinstance(update, Update) and update.message:
        chat_id = update.message.chat_id
    else:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat_id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='helper').first()
        if not user:
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data='helper_my_tasks')],
        [InlineKeyboardButton("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data='available_tasks')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_helper_menu')]
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø–æ–º–æ–≥–∞—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø–æ–º–æ–≥–∞—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=MENU_KEYBOARD
    )

async def show_available_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç
        user = session.query(User).filter_by(chat_id=chat_id, user_type='helper').first()
        if not user:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è (status='new')
        tasks = session.query(Task).filter_by(status='new').all()
        
        if not tasks:
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return
        
        message = ["üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n"]
        keyboard = []
        
        for task in tasks:
            message.append(
                f"üìå {task.title}\n"
                f"üìù {task.description[:50]}...\n"
                f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n"
            )
            keyboard.append([InlineKeyboardButton(
                f"–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ: {task.title[:20]}...", 
                callback_data=f"take_task_{task.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')])
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def take_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    helper_chat_id = update.effective_chat.id
    
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
        task = session.query(Task).get(task_id)
        helper = session.query(User).filter_by(chat_id=helper_chat_id, user_type='helper').first()
        
        if not task or not helper:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        if task.status != 'new':
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task.status = 'in_progress'
        task.helper_id = helper.id
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
        await query.edit_message_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task.title}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        try:
            await context.bot.send_message(
                chat_id=task.student.chat_id,
                text=f"üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{task.title}' –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –ø–æ–º–æ—â–Ω–∏–∫: {helper.full_name}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞
        await helper_menu(update, context)

async def show_helper_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='helper').first()
        if not user:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª —ç—Ç–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫
        tasks = session.query(Task).filter_by(helper_id=user.id).all()
        
        if not tasks:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return
        
        message = ["üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"]
        keyboard = []
        
        for task in tasks:
            message.append(
                f"üìå {task.title}\n"
                f"üìù {task.description[:50]}...\n"
                f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {task.student.full_name}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {task.status}\n"
            )
            
            # –î–ª—è –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            if task.status == 'in_progress':
                keyboard.append([
                    InlineKeyboardButton(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ '{task.title[:10]}...'", 
                        callback_data=f"submit_solution_{task.id}"),
                    InlineKeyboardButton(
                        f"‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è '{task.title[:10]}...'", 
                        callback_data=f"abandon_task_{task.id}")
                ])
        
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')])
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def abandon_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    helper_chat_id = update.effective_chat.id
    
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
        task = session.query(Task).get(task_id)
        helper = session.query(User).filter_by(chat_id=helper_chat_id, user_type='helper').first()
        
        if not task or not helper or task.helper_id != helper.id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤–æ–µ"
        task.status = 'new'
        task.helper_id = None
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
        await query.edit_message_text(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è: {task.title}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        try:
            await context.bot.send_message(
                chat_id=task.student.chat_id,
                text=f"‚ö†Ô∏è –ü–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è '{task.title}'. –ó–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–º–æ—â–Ω–∏–∫–∞
        await show_helper_tasks(update, context)

async def submit_solution(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['solution_task_id'] = task_id
    
    await query.edit_message_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∞—Ä—Ö–∏–≤):\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    return SEND_SOLUTION

async def receive_solution(update: Update, context: CallbackContext) -> int:
    task_id = context.user_data.get('solution_task_id')
    helper_chat_id = update.effective_chat.id
    
    if not task_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END
    
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
        task = session.query(Task).get(task_id)
        helper = session.query(User).filter_by(chat_id=helper_chat_id, user_type='helper').first()
        
        if not task or not helper or task.helper_id != helper.id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if update.message.text:
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            task.solution_text = update.message.text
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç (PDF, Word –∏ —Ç.–¥.)
            task.solution_file_id = update.message.document.file_id
        elif update.message.photo:
            # –§–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            task.solution_file_id = update.message.photo[-1].file_id
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è")
            return SEND_SOLUTION
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        task.status = 'completed'
        helper.completed_tasks += 1
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
        await update.message.reply_text("‚úÖ –†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        try:
            message = f"üéâ –ü–æ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é '{task.title}' –≥–æ—Ç–æ–≤–æ —Ä–µ—à–µ–Ω–∏–µ!\n–ü–æ–º–æ—â–Ω–∏–∫: {helper.full_name}"
            
            if task.solution_text:
                await context.bot.send_message(
                    chat_id=task.student.chat_id,
                    text=f"{message}\n\n–†–µ—à–µ–Ω–∏–µ:\n{task.solution_text}"
                )
            elif task.solution_file_id:
                await context.bot.send_message(
                    chat_id=task.student.chat_id,
                    text=message
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ
                if update.message.document:
                    await context.bot.send_document(
                        chat_id=task.student.chat_id,
                        document=task.solution_file_id
                    )
                else:  # photo
                    await context.bot.send_photo(
                        chat_id=task.student.chat_id,
                        photo=task.solution_file_id
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞
    await helper_menu(update, context)
    return ConversationHandler.END

async def create_task_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è:")
    return CREATE_TASK_TITLE

async def task_title_received(update: Update, context: CallbackContext) -> int:
    context.user_data['task_title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    return CREATE_TASK_DESC

async def task_description_received(update: Update, context: CallbackContext) -> int:
    context.user_data['task_desc'] = update.message.text
    
    with Session() as session:
        subjects = session.query(Subject).all()
    
    keyboard = []
    if subjects:
        for subject in subjects:
            keyboard.append([InlineKeyboardButton(subject.name, callback_data=f"subj_{subject.id}")])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="new_subject")])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CREATE_TASK_SUBJECT

async def task_subject_received(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "new_subject":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
            return CREATE_TASK_SUBJECT
        else:
            subject_id = int(query.data.split('_')[1])
            context.user_data['subject_id'] = subject_id
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
            return CREATE_TASK_TEACHER
    else:
        subject_name = update.message.text
        
        with Session() as session:
            existing_subject = session.query(Subject).filter_by(name=subject_name).first()
            if existing_subject:
                context.user_data['subject_id'] = existing_subject.id
            else:
                new_subject = Subject(name=subject_name)
                session.add(new_subject)
                session.commit()
                context.user_data['subject_id'] = new_subject.id
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return CREATE_TASK_TEACHER

async def task_teacher_received(update: Update, context: CallbackContext) -> int:
    context.user_data['teacher_name'] = update.message.text
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    return CREATE_TASK_PHOTO

async def task_photo_received(update: Update, context: CallbackContext) -> int:
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
    else:
        context.user_data['photo_id'] = None
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    chat_id = update.effective_chat.id
    title = context.user_data['task_title']
    description = context.user_data['task_desc']
    subject_id = context.user_data['subject_id']
    teacher_name = context.user_data['teacher_name']
    photo_id = context.user_data.get('photo_id')
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='student').first()
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        new_task = Task(
            title=title,
            description=description,
            subject_id=subject_id,
            teacher_name=teacher_name,
            student_id=user.id,
            photo_id=photo_id,
            status='new'
        )
        session.add(new_task)
        session.commit()
    
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    await student_menu(update, context)
    return ConversationHandler.END

async def skip_photo(update: Update, context: CallbackContext) -> int:
    context.user_data['photo_id'] = None
    return await task_photo_received(update, context)

async def teacher_menu(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not user:
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            else:
                query = update.callback_query
                await query.answer()
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è –º–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data='teacher_student_tasks')],
        [InlineKeyboardButton("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data='teacher_students')],
        [InlineKeyboardButton("üë®‚Äçüè´ –ü–æ–º–æ–≥–∞—é—â–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º", callback_data='teacher_helpers')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_teacher_menu')]
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=MENU_KEYBOARD
    )

async def show_teacher_student_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        teacher = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è, –≥–¥–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        tasks = session.query(Task).filter(
            Task.teacher_name.ilike(f"%{teacher.full_name}%")
        ).all()
        
        if not tasks:
            await query.edit_message_text("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º")
            return
        
        message = ["üìã –ó–∞–¥–∞–Ω–∏—è –º–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"]
        for task in tasks:
            message.append(
                f"üìå {task.title}\n"
                f"üìù {task.description[:50]}...\n"
                f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {task.student.full_name}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {task.status}\n"
            )
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_teacher_menu')]]
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def show_teacher_students(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        teacher = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        students = session.query(User).join(Task, Task.student_id == User.id).filter(
            Task.teacher_name.ilike(f"%{teacher.full_name}%")
        ).distinct().all()
        
        if not students:
            await query.edit_message_text("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º")
            return
        
        message = ["üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"]
        for student in students:
            message.append(f"- {student.full_name}")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_teacher_menu')]]
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def show_teacher_helpers(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        teacher = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–º–æ—â–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        helpers = session.query(User).join(Task, Task.helper_id == User.id).filter(
            Task.teacher_name.ilike(f"%{teacher.full_name}%"),
            Task.status == 'completed'
        ).distinct().all()
        
        if not helpers:
            await query.edit_message_text("–ù–µ—Ç –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞–Ω–∏—è–º")
            return
        
        message = ["üë®‚Äçüè´ –ü–æ–º–æ–≥–∞—é—â–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞–Ω–∏—è–º:\n"]
        for helper in helpers:
            message.append(f"- {helper.full_name} ‚≠ê {helper.rating:.1f} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {helper.completed_tasks})")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_teacher_menu')]]
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))

async def refresh_student_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await student_menu(update, context)

async def back_to_student_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await student_menu(update, context)

async def refresh_helper_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await helper_menu(update, context)

async def back_to_helper_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await helper_menu(update, context)

async def refresh_teacher_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await teacher_menu(update, context)

async def back_to_teacher_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await teacher_menu(update, context)

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def cancel_solution(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END