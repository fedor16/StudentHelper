from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from database import Session, User, Task, Subject, func
from datetime import datetime
from sqlalchemy.orm import joinedload
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
REGISTER_STATE, CREATE_TASK_TITLE, CREATE_TASK_DESC, CREATE_TASK_SUBJECT, CREATE_TASK_TEACHER, CREATE_TASK_DEADLINE, CREATE_TASK_ATTACHMENT = range(7)
SEND_SOLUTION, = range(1, 2)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
MENU_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("–ú–µ–Ω—é")]], 
    resize_keyboard=True,
    is_persistent=True
)

async def start(update: Update, context: CallbackContext) -> int:
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        
        if user:
            if user.user_type == 'student':
                await student_menu(update, context)
            elif user.user_type == 'helper':
                await helper_menu(update, context)
            elif user.user_type == 'teacher':
                await teacher_menu(update, context)
            return ConversationHandler.END
        else:
            keyboard = [
                [InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data='student')],
                [InlineKeyboardButton("–ü–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç", callback_data='helper')],
                [InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data='teacher')]
            ]
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return REGISTER_STATE

async def register_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    user_type = query.data
    context.user_data['user_type'] = user_type
    
    if user_type == 'student':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –≥—Ä. –ò–¢-1")
    elif user_type == 'helper':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –≥—Ä. –ò–¢-2")
    elif user_type == 'teacher':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–∏–º–µ—Ä: –°–∏–¥–æ—Ä–æ–≤ –°.–ê.")
    
    return REGISTER_STATE

async def complete_registration(update: Update, context: CallbackContext) -> int:
    if 'user_type' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å.")
        return REGISTER_STATE
    text = update.message.text
    chat_id = update.effective_chat.id
    user_type = context.user_data['user_type']
    
    if user_type in ['student', 'helper']:
        if not re.search(r'–≥—Ä\.\s*\w+', text, re.IGNORECASE):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –≥—Ä. –ò–¢-1")
            return REGISTER_STATE
    
    with Session() as session:
        new_user = User(
            chat_id=chat_id,
            user_type=user_type,
            full_name=text
        )
        
        if user_type in ['student', 'helper']:
            match = re.search(r'–≥—Ä\.\s*(\w+)', text, re.IGNORECASE)
            if match:
                new_user.group_name = match.group(1).strip()
        
        session.add(new_user)
        session.commit()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_type == 'student':
        await student_menu(update, context)
    elif user_type == 'helper':
        await helper_menu(update, context)
    elif user_type == 'teacher':
        await teacher_menu(update, context)
    
    return ConversationHandler.END

async def menu_handler(update: Update, context: CallbackContext):
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ–Ω—é
    context.user_data.clear()
    
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        if user.user_type == 'student':
            await student_menu(update, context)
        elif user.user_type == 'helper':
            await helper_menu(update, context)
        elif user.user_type == 'teacher':
            await teacher_menu(update, context)

async def student_menu(update: Update, context: CallbackContext):
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        if not user or user.user_type != 'student':
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", reply_markup=MENU_KEYBOARD)
            else:
                query = update.callback_query
                await query.answer()
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='create_task')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data='my_tasks')],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤", callback_data='helper_rating')],
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüéì –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "üë®‚Äçüéì –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    return


async def show_student_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    # 2) —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ subject –∏ helper
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id).first()
        tasks = session.query(Task)\
                       .options(
                           joinedload(Task.subject),
                           joinedload(Task.helper)
                       )\
                       .filter_by(student_id=user.id)\
                       .order_by(Task.status, Task.created_at)\
                       .all()
        
    if not tasks:
        await query.edit_message_text(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
        )
        return
        
    # 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω–µ —Ü–∏–∫–ª–∞
    message = ["üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:"]
    keyboard = []
        
    for task in tasks:
        status_icon = {
            'new': 'üÜï',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ'
        }[task.status]
        
        lines = [
            f"{status_icon} <b>{task.title}</b>",
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description[:50]}‚Ä¶",
            f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}",        # —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ
            f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {task.teacher_name}",
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%d.%m.%Y %H:%M')}",
            f"‚è∞ –°—Ä–æ–∫: {task.deadline.strftime('%d.%m.%Y')}",
            f"üîÑ –°—Ç–∞—Ç—É—Å: {task.status}"
        ]
        if task.helper:
            lines.append(f"üë®‚Äçüéì –ü–æ–º–æ—â–Ω–∏–∫: {task.helper.full_name}")
        
        message.append("\n".join(lines))
        
        # –∫–Ω–æ–ø–∫–∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª –∏–ª–∏ ¬´–û—Ü–µ–Ω–∏—Ç—å¬ª
        if task.status == 'new':
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å '{task.title[:15]}‚Ä¶'",
                    callback_data=f"delete_task_{task.id}"
                )
            ])
        elif task.status == 'completed' and not task.rating:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚≠ê –û—Ü–µ–Ω–∏—Ç—å '{task.title[:15]}‚Ä¶'",
                    callback_data=f"rate_task_{task.id}"
                )
            ])
    
    # 4) –µ–¥–∏–Ω–æ–∂–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–í –º–µ–Ω—é¬ª
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_student_menu')])
    
    # 5) –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —à–ª—ë–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text="\n\n".join(message),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def delete_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    
    with Session() as session:
        task = session.query(Task).get(task_id)
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if task.status != 'new':
            await query.edit_message_text("‚ùå –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            return
            
        session.delete(task)
        session.commit()
    
    await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    await show_student_tasks(update, context)

async def rate_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    context.user_data['rating_task_id'] = task_id
    
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f'set_rating_{i}') for i in range(1, 6)]
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (1-5):",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def set_rating(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[2])
    task_id = context.user_data.get('rating_task_id')
    
    if not task_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    with Session() as session:
        task = session.query(Task).get(task_id)
        if not task or task.status != 'completed':
            await query.edit_message_text("‚ùå –ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            return
            
        task.rating = rating
        session.commit()
        
        if task.helper:
            helper = session.query(User).get(task.helper.id)
            completed_tasks = session.query(Task)\
                .filter_by(helper_id=helper.id, status='completed')\
                .filter(Task.rating.isnot(None))\
                .count()
                
            if completed_tasks > 0:
                total_rating = session.query(func.sum(Task.rating))\
                    .filter_by(helper_id=helper.id)\
                    .scalar()
                helper.rating = total_rating / completed_tasks
                session.commit()
    
    await query.edit_message_text(f"‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} –∑–∞ –∑–∞–¥–∞–Ω–∏–µ")
    await show_student_tasks(update, context)

async def show_helper_rating(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    with Session() as session:
        helpers = session.query(User)\
            .filter_by(user_type='helper')\
            .order_by(User.rating.desc())\
            .all()
        
    if not helpers:
        await query.edit_message_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )
        return

        
    message = ["üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:\n"]
    for i, helper in enumerate(helpers, 1):
        message.append(
            f"{i}. {helper.full_name} - ‚≠ê {helper.rating:.1f} "
            f"(–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {helper.completed_tasks})"
        )
        
    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_student_menu')]]
        
    await query.edit_message_text(
        text="\n".join(message),
        reply_markup=InlineKeyboardMarkup(keyboard))

async def helper_menu(update: Update, context: CallbackContext):
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    
    if isinstance(update, Update) and update.message:
        chat_id = update.message.chat_id
    else:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat_id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='helper').first()
        if not user:
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", reply_markup=MENU_KEYBOARD)
            else:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data='helper_my_tasks')],
        [InlineKeyboardButton("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data='available_tasks')],
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø–æ–º–æ–≥–∞—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø–æ–º–æ–≥–∞—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    return


async def show_available_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∏ —Å—Ä–∞–∑—É –≤—ã–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    with Session() as session:
        helper = session.query(User).filter_by(
            chat_id=chat_id, user_type='helper'
        ).first()
        if not helper:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
        tasks = session.query(Task).filter_by(status='new').all()

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é /menu
    if not tasks:
        await query.edit_message_text(
            "‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
        )
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º + ¬´–í—Å–µ –∑–∞–¥–∞–Ω–∏—è¬ª
    with Session() as session:
        subjects = session.query(Subject).all()

    total = len(tasks)
    keyboard = [
        [InlineKeyboardButton(f"–í—Å–µ –∑–∞–¥–∞–Ω–∏—è ({total})", callback_data="filter_tasks_all")]
    ]
    for subj in subjects:
        cnt = session.query(Task)\
            .filter_by(status='new', subject_id=subj.id)\
            .count()
        keyboard.append([
            InlineKeyboardButton(f"{subj.name} ({cnt})", callback_data=f"filter_tasks_{subj.id}")
        ])

    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')])

    await query.edit_message_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ ¬´–í—Å–µ –∑–∞–¥–∞–Ω–∏—è¬ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def filter_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data           # e.g. "filter_tasks_all" –∏–ª–∏ "filter_tasks_3"
    parts = data.split("_")     # ["filter","tasks","all"] –∏–ª–∏ ["filter","tasks","3"]
    key = parts[-1]             # "all" –∏–ª–∏ "3"

    with Session() as session:
        if key == "all":
            tasks = session.query(Task).filter_by(status='new').all()
        else:
            subject_id = int(key)
            tasks = session.query(Task).filter_by(
                status='new',
                subject_id=subject_id
            ).all()

    if not tasks:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    lines, kb = [], []
    for i, t in enumerate(tasks, 1):
        lines.append(
            f"{i}. <b>{t.title}</b>\n"
            f"{t.description}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {t.deadline.strftime('%d.%m.%Y')}\n"
        )
        kb.append([InlineKeyboardButton(
            f"{i} ‚Äì {t.title}", 
            callback_data=f"choose_task_{t.id}"
        )])

    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')])
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(kb)
    )



from sqlalchemy.orm import joinedload

async def choose_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split("_")[2])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –∏ –∞–≤—Ç–æ—Ä–æ–º
    with Session() as session:
        task = (
            session.query(Task)
                   .options(
                        joinedload(Task.subject),
                        joinedload(Task.student)
                   )
                   .get(task_id)
        )
        helper = session.query(User)\
                        .filter_by(chat_id=update.effective_chat.id, user_type='helper')\
                        .first()

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ in_progress
        task.status    = 'in_progress'
        task.helper_id = helper.id
        session.commit()

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n"
            f"<b>–¢–µ–º–∞:</b> {task.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{task.description}\n\n"
            f"üè∑ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {task.subject.name}\n"
            f"üë®‚Äçüéì <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {task.student.full_name}\n"
            f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.deadline.strftime('%d.%m.%Y')}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if task.attachment_id:
            name = task.attachment_name or '—Ñ–∞–π–ª'
            text += f"\nüìé –í–ª–æ–∂–µ–Ω–∏–µ: {name}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
    await query.edit_message_text(
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[ 
            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu') 
        ]])
    )
    if task.attachment_id:
    # –º—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ attachment_name='—Ñ–æ—Ç–æ' –¥–ª—è —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ ‚Äî real filename
        if task.attachment_name == '—Ñ–æ—Ç–æ':
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=task.attachment_id
            )
        else:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ –ø–æ–¥–ø–∏—Å–∏
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=task.attachment_id,
                filename=task.attachment_name  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ
            )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞, —á—Ç–æ –µ–≥–æ –∑–∞–¥–∞—á—É –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É
    try:
        await context.bot.send_message(
            chat_id=task.student.chat_id,
            text=(
                f"üéâ –í–∞—à—É –∑–∞–¥–∞—á—É ¬´{task.title}¬ª –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É "
                f"–ø–æ–º–æ—â–Ω–∏–∫: {helper.full_name}"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")



async def take_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    helper_chat_id = update.effective_chat.id

    with Session() as session:
        task = session.query(Task).get(task_id)
        helper = session.query(User)\
                        .filter_by(chat_id=helper_chat_id, user_type='helper')\
                        .first()

        if not task or not helper:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        if task.status != 'new':
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º")
            return

        task.status    = 'in_progress'
        task.helper_id = helper.id
        session.commit()

    await query.edit_message_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: {task.title}")
    try:
        await context.bot.send_message(
            chat_id=task.student.chat_id,
            text=f"üéâ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{task.title}' –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –ø–æ–º–æ—â–Ω–∏–∫: {helper.full_name}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

    await helper_menu(update, context)



async def show_helper_tasks(update, context):
    query = update.callback_query
    await query.answer()
    helper_chat = update.effective_chat.id

    with Session() as session:
        helper = session.query(User).filter_by(
            chat_id=helper_chat, user_type='helper'
        ).first()
        if not helper:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return
        tasks = session.query(Task).filter_by(helper_id=helper.id).all()

    if not tasks:
        await query.edit_message_text(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
        )
        return

    lines, kb = [], []
    for i, t in enumerate(tasks, 1):
        title = f"<s>{t.title}</s>" if t.status == 'completed' else t.title
        lines.append(f"{i}. {title} ‚Äî ‚è∞ {t.deadline.strftime('%d.%m.%Y')}")

        if t.status == 'in_progress':
            kb.append([
                InlineKeyboardButton(
                    f"üì§ –†–µ—à–µ–Ω–∏–µ {i}",               # <- —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    callback_data=f"submit_solution_{t.id}"
                ),
                InlineKeyboardButton(
                    "‚ÑπÔ∏è",
                    callback_data=f"info_task_{t.id}"
                ),
                InlineKeyboardButton(
                    "‚ùå",
                    callback_data=f"abandon_task_{t.id}"
                )
            ])

    kb.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')])

    await query.edit_message_text(
        "\n".join(lines),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(kb)
    )





async def info_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id  # <-- –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ chat_id

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤—è–∑—è–º–∏
    with Session() as session:
        task = (
            session.query(Task)
                   .options(
                       joinedload(Task.subject),
                       joinedload(Task.student),
                       joinedload(Task.helper)
                   )
                   .get(int(query.data.split("_")[2]))
        )

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é:</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {task.title}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{task.description}\n\n"
        f"üè∑ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {task.subject.name}\n"
        f"üë®‚Äçüéì <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {task.student.full_name}\n"
        f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.deadline.strftime('%d.%m.%Y')}\n"
        f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {task.status}"
    )
    if task.helper:
        text += f"\nüë®‚Äçüéì <b>–ü–æ–º–æ—â–Ω–∏–∫:</b> {task.helper.full_name}"

    # –ö–Ω–æ–ø–∫–∞ ¬´–í –º–µ–Ω—é¬ª
    menu_kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')
    ]])

    # –®–ª—ë–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='HTML',
        reply_markup=menu_kb
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if task.attachment_id:
        if task.attachment_name == '—Ñ–æ—Ç–æ':
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=task.attachment_id
            )
        else:
            await context.bot.send_document(
                chat_id=chat_id,
                document=task.attachment_id,
                filename=task.attachment_name
            )

async def view_my_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[3])
    with Session() as session:
        t = session.query(Task).get(tid)

    text = (
        f"<b>{t.title}</b>\n\n"
        f"{t.description}\n\n"
        f"üè∑ {t.subject.name}\n"
        f"üë®‚Äçüéì {t.student.full_name}\n"
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {t.deadline.strftime('%d.%m.%Y')}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {t.status}"
    )
    kb = [
        [
          InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"submit_solution_{tid}"),
          InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è",          callback_data=f"abandon_task_{tid}")
        ],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_helper_menu')]
    ]
    await query.edit_message_text(text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))

async def abandon_task(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    helper_chat_id = update.effective_chat.id
    
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
        task = session.query(Task).get(task_id)
        helper = session.query(User).filter_by(chat_id=helper_chat_id, user_type='helper').first()
        
        if not task or not helper or task.helper_id != helper.id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤–æ–µ"
        task.status = 'new'
        task.helper_id = None
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
        await query.edit_message_text(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è: {task.title}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        try:
            await context.bot.send_message(
                chat_id=task.student.chat_id,
                text=f"‚ö†Ô∏è –ü–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è '{task.title}'. –ó–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–º–æ—â–Ω–∏–∫–∞
        await show_helper_tasks(update, context)

async def submit_solution(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['solution_task_id'] = task_id
    
    await query.edit_message_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∞—Ä—Ö–∏–≤):\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    return SEND_SOLUTION

async def receive_solution(update: Update, context: CallbackContext) -> int:
    task_id = context.user_data.get('solution_task_id')
    helper_chat_id = update.effective_chat.id
    
    if not task_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END
    
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â–Ω–∏–∫–∞
        task = session.query(Task).get(task_id)
        helper = session.query(User).filter_by(chat_id=helper_chat_id, user_type='helper').first()
        
        if not task or not helper or task.helper_id != helper.id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if update.message.text:
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            task.solution_text = update.message.text
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç (PDF, Word –∏ —Ç.–¥.)
            task.solution_file_id = update.message.document.file_id
        elif update.message.photo:
            # –§–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            task.solution_file_id = update.message.photo[-1].file_id
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è")
            return SEND_SOLUTION
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        task.status = 'completed'
        helper.completed_tasks += 1
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫—É
        await update.message.reply_text("‚úÖ –†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        try:
            message = f"üéâ –ü–æ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é '{task.title}' –≥–æ—Ç–æ–≤–æ —Ä–µ—à–µ–Ω–∏–µ!\n–ü–æ–º–æ—â–Ω–∏–∫: {helper.full_name}"
            
            if task.solution_text:
                await context.bot.send_message(
                    chat_id=task.student.chat_id,
                    text=f"{message}\n\n–†–µ—à–µ–Ω–∏–µ:\n{task.solution_text}"
                )
            elif task.solution_file_id:
                await context.bot.send_message(
                    chat_id=task.student.chat_id,
                    text=message
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ
                if update.message.document:
                    await context.bot.send_document(
                        chat_id=task.student.chat_id,
                        document=task.solution_file_id
                    )
                else:  # photo
                    await context.bot.send_photo(
                        chat_id=task.student.chat_id,
                        photo=task.solution_file_id
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞
    await helper_menu(update, context)
    return ConversationHandler.END

async def create_task_start(update: Update, context: CallbackContext) -> int:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥", update.effective_chat.id)
    query = update.callback_query
    await query.answer()
    
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    context.user_data.clear()
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è:")
    return CREATE_TASK_TITLE

async def task_title_received(update: Update, context: CallbackContext) -> int:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–≤—ë–ª —Ç–µ–º—É: %s", update.effective_chat.id, update.message.text)
    context.user_data['task_title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    return CREATE_TASK_DESC

async def task_description_received(update: Update, context: CallbackContext) -> int:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ", update.effective_chat.id)
    context.user_data['task_desc'] = update.message.text
    
    with Session() as session:
        subjects = session.query(Subject).all()
    
    keyboard = []
    if subjects:
        for subject in subjects:
            keyboard.append([InlineKeyboardButton(subject.name, callback_data=f"subj_{subject.id}")])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="new_subject")])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard))
    return CREATE_TASK_SUBJECT

async def task_subject_received(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "new_subject":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
            return CREATE_TASK_SUBJECT
        else:
            subject_id = int(query.data.split('_')[1])
            context.user_data['subject_id'] = subject_id
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
            return CREATE_TASK_TEACHER
    else:
        subject_name = update.message.text
        
        with Session() as session:
            existing_subject = session.query(Subject).filter_by(name=subject_name).first()
            if existing_subject:
                context.user_data['subject_id'] = existing_subject.id
            else:
                new_subject = Subject(name=subject_name)
                session.add(new_subject)
                session.commit()
                context.user_data['subject_id'] = new_subject.id
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
        return CREATE_TASK_TEACHER

async def task_teacher_received(update: Update, context: CallbackContext) -> int:
    context.user_data['teacher_name'] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì\n"
        "(–¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è):")
    return CREATE_TASK_DEADLINE

from datetime import datetime as dt

async def task_deadline_received(update, context) -> int:
    text = update.message.text.strip()
    try:
        deadline = dt.strptime(text, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return CREATE_TASK_DEADLINE

    if deadline.date() <= dt.now().date():
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return CREATE_TASK_DEADLINE

    context.user_data['deadline'] = deadline
    await update.message.reply_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç, PDF, –∞—Ä—Ö–∏–≤)\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
    return CREATE_TASK_ATTACHMENT

async def task_attachment_received(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É."""
    # 1) –°–æ–±–∏—Ä–∞–µ–º attachment_id/name
    if update.message.photo:
        f = update.message.photo[-1]
        context.user_data['attachment_id']   = f.file_id
        context.user_data['attachment_name'] = '—Ñ–æ—Ç–æ'
    elif update.message.document:
        doc = update.message.document
        context.user_data['attachment_id']   = doc.file_id
        # –µ—Å–ª–∏ —É —Ñ–∞–π–ª–∞ –µ—Å—Ç—å –∏–º—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ '–¥–æ–∫—É–º–µ–Ω—Ç'
        context.user_data['attachment_name'] = doc.file_name or '–¥–æ–∫—É–º–µ–Ω—Ç'
    else:
        context.user_data['attachment_id']   = None
        context.user_data['attachment_name'] = None

    # 2) –î–∞–ª—å—à–µ –∏–¥—ë—Ç –≤–∞—à –∫–æ–¥ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ task_photo_received, 
    #    —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–æ photo_id –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ attachment_id –∏ attachment_name.
    #    –ü—Ä–∏–º–µ—Ä (—É–ø—Ä–æ—â—ë–Ω–Ω–æ):
    chat_id     = update.effective_chat.id
    title       = context.user_data['task_title']
    description = context.user_data['task_desc']
    subject_id  = context.user_data['subject_id']
    teacher     = context.user_data['teacher_name']
    deadline    = context.user_data['deadline']
    attach_id   = context.user_data.get('attachment_id')
    attach_name = context.user_data.get('attachment_name')

    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='student').first()
        new_task = Task(
            title=title,
            description=description,
            subject_id=subject_id,
            teacher_name=teacher,
            deadline=deadline,
            student_id=user.id,
            attachment_id=attach_id,
            attachment_name=attach_name,
            status='new'
        )
        session.add(new_task)
        session.commit()

    # 3) –û—á–∏—â–∞–µ–º context –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
    context.user_data.clear()
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=MENU_KEYBOARD)
    await student_menu(update, context)
    return ConversationHandler.END

async def skip_attachment(update: Update, context: CallbackContext) -> int:
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /skip ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ,
    # —á—Ç–æ –∏ task_attachment_received –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.
    update.message.text = None
    return await task_attachment_received(update, context)

"""    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ", update.effective_chat.id)
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
    else:
        context.user_data['photo_id'] = None
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    chat_id = update.effective_chat.id
    title = context.user_data['task_title']
    description = context.user_data['task_desc']
    subject_id = context.user_data['subject_id']
    teacher_name = context.user_data['teacher_name']
    photo_id = context.user_data.get('photo_id')
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='student').first()
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        new_task = Task(
            title=title,
            description=description,
            subject_id=subject_id,
            teacher_name=teacher_name,
            deadline=context.user_data['deadline'],
            student_id=user.id,
            photo_id=photo_id,
            status='new'
        )
        session.add(new_task)
        session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    context.user_data.clear()
    
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=MENU_KEYBOARD)
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    await student_menu(update, context)
    return ConversationHandler.END

async def skip_photo(update: Update, context: CallbackContext) -> int:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è
    context.user_data['photo_id'] = None
    return await task_photo_received(update, context)"""

async def teacher_menu(update: Update, context: CallbackContext):
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    
    chat_id = update.effective_chat.id
    
    with Session() as session:
        user = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not user:
            if isinstance(update, Update) and update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", reply_markup=MENU_KEYBOARD)
            else:
                query = update.callback_query
                await query.answer()
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
    
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è –º–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data='teacher_student_tasks')],
        [InlineKeyboardButton("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data='teacher_students')],
        [InlineKeyboardButton("üë®‚Äçüè´ –ü–æ–º–æ–≥–∞—é—â–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º", callback_data='teacher_helpers')],
    ]
    
    if isinstance(update, Update) and update.message:
        await update.message.reply_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "üë®‚Äçüè´ –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    return

from sqlalchemy.orm import joinedload
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import CallbackContext
from database import Session, User, Task

async def show_teacher_student_tasks(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    # –ó–∞–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞—è subject, student –∏ helper
    with Session() as session:
        teacher = session.query(User) \
                         .filter_by(chat_id=chat_id, user_type='teacher') \
                         .first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return

        tasks = (
            session.query(Task)
                   .options(
                       joinedload(Task.subject),
                       joinedload(Task.student),
                       joinedload(Task.helper)
                   )
                   .filter(Task.teacher_name.ilike(f"%{teacher.full_name}%"))
                   .order_by(Task.created_at)
                   .all()
        )

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ‚Äî –æ—Ç—Ä–∏—Å—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not tasks:
        await query.edit_message_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    message_lines = ["üìã –ó–∞–¥–∞–Ω–∏—è –º–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"]
    for task in tasks:
        block = [
            f"üìå <b>{task.title}</b>",
            f"üìù {task.description[:50]}‚Ä¶",
            f"üè∑ –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}",
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {task.student.full_name}"
        ]

        # –í–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task.attachment_id:
            name = task.attachment_name or "—Ñ–∞–π–ª"
            block.append(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ: {name}")

        # –ü–æ–º–æ—â–Ω–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task.helper:
            block.append(f"üë®‚Äçüéì –ü–æ–º–æ—â–Ω–∏–∫: {task.helper.full_name}")

        block.append(f"üîÑ –°—Ç–∞—Ç—É—Å: {task.status}")
        message_lines.append("\n".join(block) + "\n")

    keyboard = [
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_teacher_menu")]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await query.edit_message_text(
        text="\n".join(message_lines),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )



async def show_teacher_students(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    with Session() as session:
        teacher = session.query(User).filter_by(chat_id=chat_id, user_type='teacher').first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        students = session.query(User).join(Task, Task.student_id == User.id).filter(
            Task.teacher_name.ilike(f"%{teacher.full_name}%")
        ).distinct().all()
        
        if not students:
            await query.edit_message_text("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º")
            return
        
        message = ["üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–≥—Ä—É–∑–∏–≤—à–∏–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n"]
        for student in students:
            message.append(f"- {student.full_name}")
        
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_teacher_menu')]]
        
        await query.edit_message_text(
            text="\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard))



async def show_teacher_helpers(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö helper‚Äô–æ–≤, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –µ–≥–æ –∑–∞–¥–∞—á–∏
    with Session() as session:
        teacher = session.query(User)\
                         .filter_by(chat_id=chat_id, user_type='teacher')\
                         .first()
        if not teacher:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return

        helpers = (
            session.query(User)
                   .join(Task, Task.helper_id == User.id)
                   .filter(
                        Task.teacher_name.ilike(f"%{teacher.full_name}%"),
                        Task.status == 'completed'
                   )
                   .distinct()
                   .all()
        )

    # 1) –ï—Å–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    if not helpers:
        await query.edit_message_text(
            text=(
                "–ù–µ—Ç –ø–æ–º–æ–≥–∞—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞–Ω–∏—è–º.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
            ),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_teacher_menu")
            ]])
        )
        return

    # 2) –ò–Ω–∞—á–µ ‚Äî —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
    message_lines = ["üë®‚Äçüè´ –ü–æ–º–æ–≥–∞—é—â–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞–Ω–∏—è–º:\n"]
    for i, helper in enumerate(helpers, start=1):
        message_lines.append(
            f"{i}. {helper.full_name} ‚Äî ‚≠ê {helper.rating:.1f} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {helper.completed_tasks})"
        )

    # 3) –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_teacher_menu")]
    ]

    # 4) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    await query.edit_message_text(
        text="\n".join(message_lines),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def refresh_student_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await student_menu(update, context)

async def back_to_student_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    await student_menu(update, context)
    return ConversationHandler.END

async def refresh_helper_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await helper_menu(update, context)

async def back_to_helper_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    await helper_menu(update, context)
    return ConversationHandler.END

async def refresh_teacher_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await teacher_menu(update, context)

async def back_to_teacher_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    await teacher_menu(update, context)
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=MENU_KEYBOARD)
    return ConversationHandler.END

async def cancel_solution(update: Update, context: CallbackContext) -> int:
    context.user_data.clear()
    # –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø–æ–º–æ—â–Ω–∏–∫–∞
    await helper_menu(update, context)
    return ConversationHandler.END
